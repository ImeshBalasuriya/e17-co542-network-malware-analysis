import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, normalize
from tensorflow.keras.models import load_model

model = load_model('cnn_model.h5') 

selected_columns = ["id.orig_p", "id.resp_p", "proto", "service", "duration", "orig_bytes",
                    "resp_bytes", "conn_state", "history", "orig_pkts", "orig_ip_bytes",
                    "resp_pkts", "resp_ip_bytes"]

def highlight_max(s):
    is_max = s == "Malicious"
    return ['background-color: red; color: white' if v else 'background-color: lightgreen' for v in is_max]

def process_uploaded_file(uploaded_file):
    if uploaded_file is not None:
        # Read the CSV file
        df = pd.read_csv(uploaded_file)

        X = df[selected_columns]

        X = X.replace('-', np.nan)

        # Imputing missing values
        X['service'] = X['service'].fillna('unknown')
        X['orig_bytes'] = X['orig_bytes'].fillna(0)
        X['resp_bytes'] = X['resp_bytes'].fillna(0.0)
        X['history'] = X['history'].fillna('unknown')
        X['duration'] = X['duration'].fillna(0.0)

        # Cast to numerical data types
        X['duration'] = pd.to_numeric(X['duration'])
        X['orig_bytes'] = pd.to_numeric(X['orig_bytes'])
        X['resp_bytes'] = pd.to_numeric(X['resp_bytes'])
        X['id.orig_p'] = pd.to_numeric(X['id.orig_p'])
        X['id.resp_p'] = pd.to_numeric(X['id.resp_p'])

        # Encode categorical data
        X_encoded = X
        label_encoder = LabelEncoder()
        X_encoded['proto'] = label_encoder.fit_transform(X['proto'])
        X_encoded['service'] = label_encoder.fit_transform(X['service'])
        X_encoded['conn_state'] = label_encoder.fit_transform(X['conn_state'])
        X_encoded['history'] = label_encoder.fit_transform(X['history'])

        # Normalize the data
        X_normalized = normalize(X_encoded, axis=1)

        return X_normalized

def main():

    st.set_page_config(
        page_title="IoT Malware Detection in Network Traffic Data",
        page_icon="⚔️"
    )

    st.title("IoT Malware Detection in Network Traffic Data 🛡️⚔️")

    # File upload
    uploaded_file = st.file_uploader("Upload Your Network Capture as a CSV File", type=["csv"])

    if uploaded_file is not None:
        with st.spinner("Predicting..."):
            # Process and display the selected columns
            df = pd.DataFrame(process_uploaded_file(uploaded_file))
            # Apply formatting to the fisrt column
            predictions = model.predict(df)
            predicted_labels = ['Malicious' if pred > 0.5 else 'Benign' for pred in predictions]
            df.columns = selected_columns
            df.insert(0, 'prediction', predicted_labels)
            st.dataframe(df.style.apply(highlight_max, subset=['prediction']))

if __name__ == "__main__":
    main()